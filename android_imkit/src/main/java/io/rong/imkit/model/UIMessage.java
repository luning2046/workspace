package io.rong.imkit.model;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

import io.rong.imkit.adapter.BaseViewProvider;
import io.rong.imkit.adapter.IBeanItemView;
import io.rong.imkit.adapter.ImageItemViewProvider;
import io.rong.imkit.adapter.TextItemViewProvider;
import io.rong.imkit.adapter.VoiceItemViewProvider;
import io.rong.imkit.common.MessageContext;
import io.rong.imkit.common.RCloudConst;
import io.rong.imkit.utils.HTMLDecoder;
import io.rong.imkit.utils.HighLightUtils;
import io.rong.imkit.utils.ParcelUtils;
import io.rong.imkit.utils.ResourceUtils;
import io.rong.imkit.utils.Util;
import io.rong.imlib.RongIMClient.ConversationType;
import io.rong.imlib.RongIMClient.ImageMessage;
import io.rong.imlib.RongIMClient.Message;
import io.rong.imlib.RongIMClient.MessageDirection;
import io.rong.imlib.RongIMClient.ReceivedStatus;
import io.rong.imlib.RongIMClient.SentStatus;
import io.rong.imlib.RongIMClient.TextMessage;
import io.rong.imlib.RongIMClient.VoiceMessage;

import java.util.ArrayList;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;

/**
 * Entity mapped to table MESSAGE.
 */
public class UIMessage extends io.rong.imlib.RongIMClient.Message implements RCloudType, Parcelable, IBeanItemView {

	public static final String MESSAGE_OBJ = "message_obj";
	public static final String MESSAGE_CATEGORY_TEXT = "message_category_text";
	public static final String MESSAGE_CATEGORY_IMAGE = "message_category_image";
	public static final String MESSAGE_CATEGORY_VOICE = "message_category_voice";

	public static final String MESSAGE_VOICE_READED = "message_voice_readed";
	public static final String MESSAGE_VOICE_UNREAD = "message_voice_unread";

	private String messageCategory;

	private UIUserInfo userInfo;

	private ArrayList<String> portaintUrl;
	private String tempMessageId;

	private int progressText = -1;
	private boolean isSending = false;
	private int positionInList;
    private String draft;

    public String getDraft() {
        return draft;
    }

    public void setDraft(String draft) {
        this.draft = draft;
    }



	public int getPositionInList() {
		return positionInList;
	}

	public void setPositionInList(int positionInList) {
		this.positionInList = positionInList;
	}

	public UIMessage() {

	}

	public UIMessage(Message message) {

		if (message != null) {
			setContent(message.getContent());
			setConversationType(message.getConversationType());
			setExtra(message.getExtra());
			setMessageDirection(message.getMessageDirection());
			setMessageId(message.getMessageId());
			setObjectName(message.getObjectName());
			setReceivedStatus(message.getReceivedStatus());
			setReceivedTime(message.getReceivedTime());
			setSenderUserId(message.getSenderUserId());
			setSentStatus(message.getSentStatus());
			setSentTime(message.getSentTime());
			setTargetId(message.getTargetId());

			if (getContent() instanceof TextMessage) {
				setMessageCategory(MESSAGE_CATEGORY_TEXT);
			} else if (getContent() instanceof ImageMessage) {
				setMessageCategory(MESSAGE_CATEGORY_IMAGE);
			} else if (getContent() instanceof VoiceMessage) {
				setMessageCategory(MESSAGE_CATEGORY_VOICE);
			}

			setExtra(message.getExtra());
		}

	}

	private SpannableStringBuilder textMessageContent = null;

	public SpannableStringBuilder getTextMessageContent() {

		if (textMessageContent != null) {
			return textMessageContent;
		}

		if (getContent() instanceof TextMessage) {
			TextMessage textMessage = (TextMessage) getContent();
			String str = HTMLDecoder.decode(HTMLDecoder.decode(textMessage.getContent()));
			return textMessageContent = Util.highLight(HighLightUtils.loadHighLight(str));

		}

		return new SpannableStringBuilder("");
	}

	public String getTextMessageContentStr() {

		String str = "";

		if (getContent() instanceof TextMessage) {
			TextMessage textMessage = (TextMessage) getContent();
			str = HTMLDecoder.decode(HTMLDecoder.decode(textMessage.getContent()));
		}

		return str;
	}

	public String getUIImageContent(Context context) {

		if (getContent() instanceof ImageMessage) {
			return ResourceUtils.getStringResource(context, "message_type_image_content");
		}
		return "";
	}

	public String getUIVoiceContent(Context context) {

		if (getContent() instanceof VoiceMessage) {
			return ResourceUtils.getStringResource(context, "message_type_voice_content");
		}
		return "";
	}

	/**
	 * 
	 * @param in
	 */
	public UIMessage(Parcel in) {

		int flag = in.readInt();

		if (flag == RCloudConst.Parcel.EXIST_SEPARATOR) {
			setConversationType(ConversationType.setValue(in.readInt()));
		} else {
			setConversationType(null);
		}

		setTargetId(ParcelUtils.readStringFromParcel(in));
		setMessageId(in.readLong());

		flag = in.readInt();

		if (flag == RCloudConst.Parcel.EXIST_SEPARATOR) {
			setMessageDirection(MessageDirection.setValue(in.readInt()));
		} else {
			setMessageDirection(null);
		}

		setSenderUserId(ParcelUtils.readStringFromParcel(in));

		// setReadStatus(in.readInt());
		flag = in.readInt();

		if (flag == RCloudConst.Parcel.EXIST_SEPARATOR) {
			setReceivedStatus(new ReceivedStatus(in.readInt(), getMessageId()));
		} else {
			setReceivedStatus(new ReceivedStatus(0, getMessageId()));
		}

		flag = in.readInt();

		if (flag == RCloudConst.Parcel.EXIST_SEPARATOR) {
			setSentStatus(SentStatus.setValue(in.readInt()));
		} else {
			setSentStatus(null);
		}

		setReceivedTime(in.readLong());
		setSentTime(in.readLong());
		setObjectName(ParcelUtils.readStringFromParcel(in));
		setSenderUserId(ParcelUtils.readStringFromParcel(in));

		flag = in.readInt();
		if (flag == RCloudConst.Parcel.EXIST_SEPARATOR) {
			flag = in.readInt();

			if (flag == RCloudConst.Parcel.FALG_ONE_SEPARATOR) {
				setContent(ParcelUtils.readFromParcel(in, TextMessage.class));
			} else if (flag == RCloudConst.Parcel.FALG_TOW_SEPARATOR) {
				setContent(ParcelUtils.readFromParcel(in, ImageMessage.class));
			} else if (flag == RCloudConst.Parcel.FALG_THREE_SEPARATOR) {
				setContent(ParcelUtils.readFromParcel(in, VoiceMessage.class));
			}

		} else {
			setContent(null);
		}

		setExtra(ParcelUtils.readStringFromParcel(in));
		setMessageCategory(ParcelUtils.readStringFromParcel(in));

//		setUserInfo(ParcelUtils.readFromParcel(in, UIUserInfo.class));

		tempMessageId = ParcelUtils.readStringFromParcel(in);

		setSending(in.readInt() == 0 ? false : true);

        setDraft(ParcelUtils.readStringFromParcel(in));

	}

	@Override
	public int describeContents() {

		return 0;

	}

	@Override
	public void writeToParcel(Parcel dest, int flags) {

		if (getConversationType() != null) {
			dest.writeInt(RCloudConst.Parcel.EXIST_SEPARATOR);
			dest.writeInt(getConversationType().getValue());
		} else {
			dest.writeInt(RCloudConst.Parcel.NON_SEPARATOR);
		}

		ParcelUtils.writeStringToParcel(dest, getTargetId());
		dest.writeLong(getMessageId());

		if (getMessageDirection() != null) {
			dest.writeInt(RCloudConst.Parcel.EXIST_SEPARATOR);
			dest.writeInt(getMessageDirection().getValue());
		} else {
			dest.writeInt(RCloudConst.Parcel.NON_SEPARATOR);
		}

		ParcelUtils.writeStringToParcel(dest, getSenderUserId());

		if (getReceivedStatus() != null) {
			dest.writeInt(RCloudConst.Parcel.EXIST_SEPARATOR);
			dest.writeInt(getReceivedStatus().getFlag());
		} else {
			dest.writeInt(RCloudConst.Parcel.NON_SEPARATOR);
		}

		if (getSentStatus() != null) {
			dest.writeInt(RCloudConst.Parcel.EXIST_SEPARATOR);
			dest.writeInt(getSentStatus().getValue());
		} else {
			dest.writeInt(RCloudConst.Parcel.NON_SEPARATOR);
		}

		dest.writeLong(getReceivedTime());
		dest.writeLong(getSentTime());
		ParcelUtils.writeStringToParcel(dest, getObjectName());
		ParcelUtils.writeStringToParcel(dest, getSenderUserId());

		if (getContent() != null) {
			dest.writeInt(RCloudConst.Parcel.EXIST_SEPARATOR);

			if (getContent() instanceof TextMessage) {
				dest.writeInt(RCloudConst.Parcel.FALG_ONE_SEPARATOR);
				ParcelUtils.writeToParcel(dest, (TextMessage) getContent());
			} else if (getContent() instanceof ImageMessage) {
				dest.writeInt(RCloudConst.Parcel.FALG_TOW_SEPARATOR);
				ParcelUtils.writeToParcel(dest, (ImageMessage) getContent());
			} else if (getContent() instanceof VoiceMessage) {
				dest.writeInt(RCloudConst.Parcel.FALG_THREE_SEPARATOR);
				ParcelUtils.writeToParcel(dest, (VoiceMessage) getContent());
			}

		} else {
			dest.writeInt(RCloudConst.Parcel.NON_SEPARATOR);
		}

		ParcelUtils.writeStringToParcel(dest, getExtra());

		ParcelUtils.writeStringToParcel(dest, getMessageCategory());

//		ParcelUtils.writeToParcel(dest, getUserInfo());

		ParcelUtils.writeStringToParcel(dest, tempMessageId);

		dest.writeInt(isSending == false ? 0 : 1);
        ParcelUtils.writeStringToParcel(dest, getDraft());

	}

	public static final Creator<UIMessage> CREATOR = new Creator<UIMessage>() {

		@Override
		public UIMessage createFromParcel(Parcel source) {

			return new UIMessage(source);

		}

		@Override
		public UIMessage[] newArray(int size) {

			return new UIMessage[size];

		}

	};

	@Override
	public BaseViewProvider getItemViewProvider(MessageContext context) {

		BaseViewProvider itemViewProvider = null;

		if (getContent() instanceof io.rong.imlib.RongIMClient.TextMessage) {// 纯文本消息

			itemViewProvider = new TextItemViewProvider(context);

		} else if (getContent() instanceof io.rong.imlib.RongIMClient.ImageMessage) {

			itemViewProvider = new ImageItemViewProvider(context);

		} else if (getContent() instanceof io.rong.imlib.RongIMClient.VoiceMessage) {

			itemViewProvider = new VoiceItemViewProvider(context);
		}

		return itemViewProvider;

	}

	public UIConversation toConversation() {

		UIConversation uiConversation = new UIConversation();

        if(!TextUtils.isEmpty(getDraft())){
            uiConversation.setDraft(getDraft());
        }

		uiConversation.setConversationType(getConversationType());
		uiConversation.setLatestMessageId(getMessageId());
		uiConversation.setLatestMessage(getContent());
		uiConversation.setObjectName(getObjectName());
		uiConversation.setReceivedTime(getReceivedTime());
		uiConversation.setSenderUserId(getSenderUserId());
		uiConversation.setTargetId(getTargetId());

		return uiConversation;

	}

	public String getMessageCategory() {

		if (TextUtils.isEmpty(messageCategory) && getContent() != null) {

			if (getContent() instanceof TextMessage) {
				setMessageCategory(MESSAGE_CATEGORY_TEXT);
			} else if (getContent() instanceof ImageMessage) {
				setMessageCategory(MESSAGE_CATEGORY_IMAGE);
			} else if (getContent() instanceof VoiceMessage) {
				setMessageCategory(MESSAGE_CATEGORY_VOICE);
			}

		}

		return messageCategory;
	}

	public void setMessageCategory(String messageCategory) {
		this.messageCategory = messageCategory;
	}

	public void setTextMessageContent(SpannableStringBuilder textMessageContent) {
		this.textMessageContent = textMessageContent;
	}

	public UIUserInfo getUserInfo() {
		return userInfo;
	}

	public void setUserInfo(UIUserInfo userInfo) {
		this.userInfo = userInfo;
	}

	@Override
	public void setSenderUserId(String senderUserId) {
		super.setSenderUserId(senderUserId);
		userInfo = new UIUserInfo();
		userInfo.setUserId(senderUserId);
	}

	public ArrayList<String> getPortaintUrl() {
		return portaintUrl;
	}

	public void setPortaintUrl(ArrayList<String> portaintUrl) {
		this.portaintUrl = portaintUrl;
	}

	public int getProgressText() {
		return progressText;
	}

	public void setProgressText(int progressText) {
		this.progressText = progressText;
	}

	public boolean isSending() {
		return isSending;
	}

	public void setSending(boolean isSending) {
		this.isSending = isSending;
	}

}
